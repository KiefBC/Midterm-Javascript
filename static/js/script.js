/**
 * This Class is responsible for generating user data using the Random User Generator API.
 */
class UserGenerator {
  constructor() {
    console.log('\nUserGenerator instance created.\n\n');
    this.usersObjArray = []; // Array to hold generated user data
    this.employeeID = 1; // Unique ID for each user (employee1, employee2, etc.)
    this.STAFFCOUNT = 4; // Number of staff members + 1 (for the first 3 users)

  }

  /**
   * Method to generate a single user
   * @returns - A user object
   */
  async generateUser() {
    try {
      const response = await fetch('https://randomuser.me/api/?inc=name,email,picture,dob');
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      const data = await response.json();
      const user = data.results[0]; // Extracting the first user

      return {
        firstName: user.name.first,
        lastName: user.name.last,
        dateOfBirth: user.dob.date,
        email: user.email,
        userName: `employee${this.employeeID++}`,
        // isStaff will be true for the first 3 users, and false for the rest
        isStaff: this.employeeID <= this.STAFFCOUNT,
        picture: user.picture.large
      };

    } catch (error) {
      console.error('Error fetching user:', error);
    }
  }

  /**
   * Method to generate multiple users
   * @param count - The number of users to generate
   */
  async generateMultipleUsers(count) {
    for (let i = 0; i < count; i++) {
      const user = await this.generateUser();
      if (user) this.usersObjArray.push(user);
    }
  }

  /**
   * Getter method to return all users
   * @returns - An array of user objects
   */
  get allUsers() {
    return this.usersObjArray;
  }
}

/**
 * This Class is responsible for generating user cards using the user data generated by the UserGenerator Class.
 */
class CardGenerator {
  constructor() {
    console.log('\nCardGenerator instance created.\n\n')
  }

  /**
   * Adds a Button if the logged in user is a staff member
   */
  addStaffButton() {
    /*
     * This method is not implemented yet
     */
  }
}

/**
 * This Class is responsible for registering and logging in real users.
 */
class HumanUser {
  constructor() {
    console.log('\nHumanUser instance created.\n\n');
    this.isLogged = false;
    this.isStaff = true;
    this.userName = null;
    this.password = null;
  }

  /**
   * Confirms that the user has been logged in
   * @returns - True if the user is logged in, false otherwise
   */
  get isLoggedIn() {
    return this.isLogged;
  }

  /**
   * Sets the user's login status
   */
  set isLoggedIn(status) {
    this.isLogged = status;

    if (status) {
      console.log('User has been logged in.');
      this.isLogged = true;
    } else {
      console.log('User has been logged out.');
      this.isLogged = false;
    }
  }

  /**
   * Confirms that the user is a staff member
   * @returns - True if the user is a staff member, false otherwise
   */
  get isStaffMember() {
    return this.isStaff;
  }

  createAccount() {
    this.userName = `superuser`;
    this.password = `password`;
  }
}

/**
 * This Class is responsible for creating a website.
 */
class Website {
  constructor() {
    console.log('\nWebsite instance created.\n\n');
    this.htmlContent = '';
    this.bootstrapModal = null;
  }

  /**
   * Method to initialize the login process.
   * It creates a modal and listens for a click event on the login button.
   */
  initialize(humanUser) {
    console.log('\nInitializing login elements...\n\n');
    const loginButton = document.getElementById('login-button');
    const modalDialog = document.querySelector('.modal-dialog');

    // Ensure modal is only created once
    if (!modalDialog) {
      this.createLoginModal(humanUser);
    }

    loginButton.addEventListener('click', () => {
      console.log('\nLogin button clicked.\n\n');

      this.bootstrapModal = new bootstrap.Modal(document.getElementById('login-modal'));
      this.bootstrapModal.show();
    });
  }

  /**
   * Method to create a modal.
   * That is, a form for user to login.
   */
  createLoginModal(humanUser) {
    console.log('\nCreating login modal...\n\n');
    const modal = document.getElementById('login-modal');
    const navbar = document.querySelector('.navbar');

    modal.innerHTML = `
      <div class="modal-dialog modal-dialog-centered animate__animated animate__lightSpeedInRight animate__slow">
            <div class="modal-content card">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="login-user-modal">Login</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="login-form" class="was-validated" novalidate>
                        <div class="mb-3 input-group">
                            <label for="first-name" class="form-label" hidden>Username</label>
                            <span class="input-group-text">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                                     class="bi bi-person-standing" viewBox="0 0 16 16">
                                    <path d="M8 3a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3M6 6.75v8.5a.75.75 0 0 0 1.5 0V10.5a.5.5 0 0 1 1 0v4.75a.75.75 0 0 0 1.5 0v-8.5a.25.25 0 1 1 .5 0v2.5a.75.75 0 0 0 1.5 0V6.5a3 3 0 0 0-3-3H7a3 3 0 0 0-3 3v2.75a.75.75 0 0 0 1.5 0v-2.5a.25.25 0 0 1 .5 0"/>
                                </svg>
                            </span>
                            <input type="text" class="form-control" id="first-name" placeholder="Enter your first name..."
                                   required pattern="^[A-Za-z]+$">
                            <div class="valid-feedback text-center">Valid.</div>
                            <div class="invalid-feedback text-center">Please fill out this field.</div>
                        </div>
                        <div class="mb-3 input-group">
                            <label for="last-name" class="form-label" hidden>Password</label>
                            <span class="input-group-text">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                                     class="bi bi-person-walking" viewBox="0 0 16 16">
                                  <path d="M9.5 1.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0M6.44 3.752A.75.75 0 0 1 7 3.5h1.445c.742 0 1.32.643 1.243 1.38l-.43 4.083a1.8 1.8 0 0 1-.088.395l-.318.906.213.242a.8.8 0 0 1 .114.175l2 4.25a.75.75 0 1 1-1.357.638l-1.956-4.154-1.68-1.921A.75.75 0 0 1 6 8.96l.138-2.613-.435.489-.464 2.786a.75.75 0 1 1-1.48-.246l.5-3a.75.75 0 0 1 .18-.375l2-2.25Z"/>
                                  <path d="M6.25 11.745v-1.418l1.204 1.375.261.524a.8.8 0 0 1-.12.231l-2.5 3.25a.75.75 0 1 1-1.19-.914zm4.22-4.215-.494-.494.205-1.843.006-.067 1.124 1.124h1.44a.75.75 0 0 1 0 1.5H11a.75.75 0 0 1-.531-.22Z"/>
                                </svg>
                            </span>
                            <input type="text" class="form-control" id="last-name" placeholder="Enter your last name..."
                                   required pattern="^[A-Za-z]+$">
                            <div class="valid-feedback text-center">Valid.</div>
                            <div class="invalid-feedback text-center">Please fill out this field.</div>
                        </div>
                    </form>
                    <div class="d-flex flex-column justify-content-center mb-3" id="login-response">
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" id="login-submit-button">Submit</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="close-modal-button">Close</button>
                    </div>
                </div>
            </div>
        </div>
        `;

    const submitButton = document.getElementById('login-submit-button');
    const closeButton = document.getElementById('close-modal-button');
    const form = document.getElementById('login-form');

    submitButton.addEventListener('click', (e) => {
      e.preventDefault();
      if (form.checkValidity()) {
        console.log('\nSubmit button clicked.\n\n');
        humanUser.isLogged = true;
        console.log('Is logged in:', humanUser.isLoggedIn);

        this.bootstrapModal.hide();

        // add a button to each card
        const staffButton = document.createElement('button');
        staffButton.classList.add('btn', 'btn-primary');
        staffButton.textContent = 'Staff';


        const cards = document.querySelectorAll('.card');
        cards.forEach((card) => {
          const staffButtonDiv = document.getElementById('staff-button-div');
          staffButtonDiv.innerHTML = `
            <button id="staff-button" class="btn btn-primary">Staff</button>
            `;
          //TODO: Verify we have the div in the correct spot.
        });
      } else {
        console.log('Form is invalid.');
      }
    });

    closeButton.addEventListener('click', (e) => {
      e.preventDefault();
      console.log('Close button clicked.');
    });

    // Insert the modal after the navbar
    navbar.parentNode.insertBefore(modal, navbar.nextSibling);
  }

  /**
   * Method to generate a user card
   * @param generatedUser - A user object
   */
  generateCard(generatedUser) {
    this.cardContainer = document.getElementById('card-div');

    this.htmlContent = `
        <div class="col-md-4 my-5 mx-auto">
          <div class="card">
            <img src="${generatedUser.picture}" class="card-img-top" alt="User Image">
            <div class="card-body">
              <h5 class="card-title">${generatedUser.firstName} ${generatedUser.lastName}</h5>
              <p class="card-text">Username: ${generatedUser.userName}</p>
              <p class="card-text">Email: ${generatedUser.email}</p>
              <p class="card-text">Date of Birth: ${generatedUser.dateOfBirth}</p>
              <p class="card-text">Staff Member: ${generatedUser.isStaff ? 'Yes' : 'No'}</p>
            </div>
            <div id="staff-button-div">
            </div>
          </div>
        </div>
    `;

    this.cardContainer.innerHTML += this.htmlContent;
  }

  /**
   * This will be used to add a button to the card if the user is a staff member
   */
  addStaffButton(humanUser) {
    const staffButtonDiv = document.getElementById('staff-button-div');
    const staffButton = document.createElement('button');
    staffButton.classList.add('btn', 'btn-primary');
    staffButton.textContent = 'Staff';
    staffButton.id = 'staff-button';
    const card = document.getElementById('staff-button');
    staffButton.addEventListener('click', () => {
      console.log('Staff button clicked.');
      if (humanUser.isStaffMember) {
        staffButtonDiv.appendChild(staffButton);
      }
    });
  }
}

document.addEventListener('DOMContentLoaded', async function () {
  const USER_COUNT = 10;

  // Create a human user
  const humanUser = new HumanUser();
  humanUser.createAccount();

  // Generate users
  const userGenerator = new UserGenerator();
  await userGenerator.generateMultipleUsers(USER_COUNT);

  // Create website
  const website = new Website();
  website.initialize(humanUser);

  for (const generatedUser of userGenerator.allUsers) {
    website.generateCard(generatedUser); // Generates a card for the user
    if (generatedUser.isStaffMember) { // Checks if the user is a staff member
      website.addStaffButton(generatedUser); // Adds a "Staff" button to the user's card
    }
  }
});


